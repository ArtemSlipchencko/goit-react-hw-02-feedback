{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/Section/Section.jsx","components/Notification/Notification.jsx","components/App/App.jsx","index.js"],"names":["Buttons","props","handleFeedback","onClick","type","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","Notification","message","App","state","e","target","textContent","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","console","log","this","Math","round","Component","ReactDOM","render","document","getElementById"],"mappings":"oSAsBeA,G,YAlBC,SAACC,GAAW,IAEjBC,EAAkBD,EAAlBC,eAEP,OACI,qCACI,yDACA,wBAAQC,QAASD,EAAgBE,KAAK,SAAtC,kBACA,wBAAQD,QAASD,EAAgBE,KAAK,SAAtC,qBACA,wBAAQD,QAASD,EAAgBE,KAAK,SAAtC,sBCkBGC,G,MA3BI,SAACJ,GAAW,IAEpBK,EAAiDL,EAAjDK,KAAMC,EAA2CN,EAA3CM,QAASC,EAAkCP,EAAlCO,IAAKC,EAA6BR,EAA7BQ,MAAOC,EAAsBT,EAAtBS,mBAElC,OACI,qCACI,4CACA,+BACI,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,sDAAyBC,aCU1BC,G,MAtBC,SAACV,GAAW,IAEjBW,EAAmBX,EAAnBW,MAAOC,EAAYZ,EAAZY,SAEd,OAEI,gCACI,6BAAKD,IACL,8BACKC,SCMFC,EAhBM,SAACb,GAAW,IAEtBc,EAAWd,EAAXc,QAEP,OACI,8BACKA,KC0EEC,E,4MA1EXC,MAAQ,CACJX,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAO,EACPC,mBAAoB,G,EAiBxBR,eAAiB,SAACgB,GACd,OAAQA,EAAEC,OAAOC,aACb,IAAK,OACD,EAAKC,UAAS,SAAAC,GAGV,OAFA,EAAKC,qBACL,EAAKC,kCACE,CAAElB,KAAMgB,EAAUhB,KAAO,MAExC,MAEA,IAAK,UACD,EAAKe,UAAS,SAAAC,GAGV,OAFA,EAAKC,qBACL,EAAKC,kCACE,CAAEjB,QAASe,EAAUf,QAAU,MAE9C,MAEA,IAAK,MACD,EAAKc,UAAS,SAAAC,GAGV,OAFA,EAAKC,qBACL,EAAKC,kCACE,CAAEhB,IAAKc,EAAUd,IAAM,MAEtC,MAEA,QACIiB,QAAQC,IAAI,gB,mEAxCpBC,KAAKN,UAAS,SAAAC,GACV,MAAO,CAAEb,MAAOa,EAAUb,MAAQ,Q,wDAKtCkB,KAAKN,UAAS,SAACC,GACX,MAAO,CAACZ,mBACJkB,KAAKC,MAAMP,EAAUhB,KAAOgB,EAAUb,MAAQ,W,+BAoChD,IAAD,EAEmDkB,KAAKV,MAAtDX,EAFF,EAEEA,KAAMC,EAFR,EAEQA,QAASC,EAFjB,EAEiBA,IAAKC,EAFtB,EAEsBA,MAAOC,EAF7B,EAE6BA,mBAElC,OACI,qCACI,0CACA,cAAC,EAAD,CAAiBR,eAAgByB,KAAKzB,iBACtC,cAAC,EAAD,CAASU,MAAM,aAAf,SACe,IAAVH,EACK,cAAC,EAAD,CAAYH,KAAMA,EAAMC,QAASA,EAASC,IAAKA,EAAKC,MAAOA,EAAOC,mBAAoBA,IACtF,cAAC,EAAD,CAAcK,QAAQ,+B,GAlE9Be,aCHlBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c89b8364.chunk.js","sourcesContent":["import React from 'react';\r\nimport './FeedbackOptions.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Buttons = (props) => {\r\n\r\n    const {handleFeedback} = props;\r\n\r\n    return (\r\n        <>\r\n            <h2>Please, leave feedback!</h2>\r\n            <button onClick={handleFeedback} type=\"button\">Good</button>\r\n            <button onClick={handleFeedback} type=\"button\">Neutral</button>\r\n            <button onClick={handleFeedback} type=\"button\">Bad</button>\r\n        </>\r\n    )\r\n};\r\n\r\nButtons.propTypes = {\r\n    handleFeedback: PropTypes.func,\r\n};\r\n\r\nexport default Buttons;","import React from 'react';\r\nimport './Statistics.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = (props) => {\r\n\r\n    const {good, neutral, bad, total, positivePercentage} = props;\r\n\r\n    return (\r\n        <>\r\n            <h2>Statistics</h2>\r\n            <ul>\r\n                <li>good: {good}</li>\r\n                <li>neutral: {neutral}</li>\r\n                <li>bad: {bad}</li>\r\n                <li>total: {total}</li>\r\n                <li>positivePercentage: {positivePercentage}</li>\r\n            </ul>\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number,\r\n    neutral: PropTypes.number,\r\n    bad: PropTypes.number,\r\n    total: PropTypes.number,\r\n    positivePercentage: PropTypes.number,\r\n};\r\n\r\nexport default Statistics;","import React from 'react';\r\nimport './Section.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = (props) => { \r\n\r\n    const {title, children} = props;\r\n\r\n    return (\r\n\r\n        <div>\r\n            <h2>{title}</h2>\r\n            <div>\r\n                {children}\r\n            </div>\r\n        </div>\r\n      \r\n    );\r\n\r\n};\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.object,\r\n};\r\n\r\nexport default Section;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = (props) => { \r\n\r\n    const {message} = props;\r\n\r\n    return (\r\n        <div>\r\n            {message}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string,\r\n};  \r\n\r\nexport default Notification;","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport FeedbackOptions from '../FeedbackOptions/FeedbackOptions';\r\nimport Statistics from '../Statistics/Statistics';\r\nimport Section  from '../Section/Section';\r\nimport Notification from '../Notification/Notification';\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n        good: 0,\r\n        neutral: 0,\r\n        bad: 0,\r\n        total: 0,\r\n        positivePercentage: 0,\r\n    };\r\n\r\n    countTotalFeedback() {\r\n        this.setState(prevState => {\r\n            return { total: prevState.total + 1};\r\n        });\r\n    };\r\n\r\n    countPositiveFeedbackPercentage() {\r\n        this.setState((prevState) => {\r\n            return {positivePercentage: \r\n                Math.round(prevState.good / prevState.total * 100)\r\n            };\r\n        });\r\n    };\r\n\r\n    handleFeedback = (e) => {\r\n        switch (e.target.textContent) {\r\n            case 'Good':\r\n                this.setState(prevState => {\r\n                    this.countTotalFeedback();\r\n                    this.countPositiveFeedbackPercentage();\r\n                    return { good: prevState.good + 1};\r\n                });\r\n            break;\r\n          \r\n            case 'Neutral':\r\n                this.setState(prevState => {\r\n                    this.countTotalFeedback();\r\n                    this.countPositiveFeedbackPercentage();\r\n                    return { neutral: prevState.neutral + 1};\r\n                });\r\n            break;\r\n          \r\n            case 'Bad':\r\n                this.setState(prevState => {\r\n                    this.countTotalFeedback();\r\n                    this.countPositiveFeedbackPercentage();\r\n                    return { bad: prevState.bad + 1};\r\n                });\r\n            break;\r\n\r\n            default: \r\n                console.log(\"Nothing :)\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const {good, neutral, bad, total, positivePercentage} = this.state;\r\n\r\n        return(\r\n            <>\r\n                <h1>Expresso</h1>\r\n                <FeedbackOptions handleFeedback={this.handleFeedback} />\r\n                <Section title=\"Statistics\">\r\n                    {total !== 0 \r\n                        ? <Statistics good={good} neutral={neutral} bad={bad} total={total} positivePercentage={positivePercentage} />\r\n                        : <Notification message=\"No feedback given\"/>\r\n                    }\r\n                </Section>\r\n                \r\n            </>\r\n        );\r\n    };\r\n\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}